generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Issue {
  id                  Int      @id @default(autoincrement())
  userCreatedIssueId  String   @map("userCreatedIssueId")
  userAssignedIssueId String?  @map("userAssignedIssueId")
  userCreatedIssue    User     @relation(fields: [userCreatedIssueId], references: [id], onDelete: Cascade, name: "userCreatedIssue")
  userAssignedIssue   User?    @relation(fields: [userAssignedIssueId], references: [id], onDelete: Cascade, name: "UserAssignedIssue")
  title               String
  description         String
  status              String   @default("OPEN")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  accounts       Account[]
  createdIssues  Issue[]   @relation("userCreatedIssue")
  assignedIssues Issue[]   @relation("UserAssignedIssue")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}
